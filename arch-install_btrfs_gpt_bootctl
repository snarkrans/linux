Простой гайд установки Arch Linux по ssh. Весь процесс установки занимает не более 10 минут.
Под * указаны альтернативные варианты установки. Можно игнорировать.

- Качаем Arch Linux.
https://archlinux.org/download/

- Делаем загрузочную флешку.
https://wiki.archlinux.org/index.php/USB_flash_installation_medium_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)#%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5_%D0%B7%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BE%D1%87%D0%BD%D0%BE%D0%B3%D0%BE_USB_%D0%B4%D0%BB%D1%8F_BIOS_%D0%B8_UEFI

- Грузимся с флешки. Если железо старое, проверяем поддержку UEFI.
$ cat /sys/firmware/efi/fw_platform_size # команда возвращает 64 в режиме UEFI. Если файл не найден, идем в биос и включаем поддержку UEFI. 

$ loadkeys us # набираем, если есть проблемы с раскладкой клавиатуры. Обычно это не нужно. 

- Подключаемся к вайфай (при необходимости). https://www.youtube.com/watch?v=bOzLwODMqIo
$ iwctl
$ iwctl device list - покажет имя вайфай адаптера
$ iwctl station device scan - сканирует сеть
$ iwctl station device get-networks - покажет имена доступных сетей
$ iwctl station device connect SSID - подключится к сети. SSID - это имя сети.
$ iwctl device wlan0 set-property Powered on

если вайфай заблокирован
*$ rfkill list
*$ rfkill unblock wifi
*$ ip link set wlan0 up
iwlwifi — беспроводной драйвер для современных чипов Intel

- Проверяем подключение.
$ ping archlinux.org

- Поздравляю, мы в матрице.
$ pacman -S openssh # устанавливаем ssh.
$ passwd # создаем временный пароль для доступа по ssh.
$ systemctl start sshd.service # запускаем сервис.
$ ip ad # смотрим айпишник.

- Если ставим линукс через интернет а не локальную сеть, нужно узнать внешний айпишник и открыть 22 порт на роутере.
$ curl ifconfig.co # смотрим внешний айпишник.

- Теперь можно переходить на машину, с которой будем ставить линукс удаленно.
$ ssh root@192.168.0.101 # заходим на удаленную машину по ssh. Айпишник подставляем наш.

- Мы зашли на удаленную машину по ssh, можно приступать к установке линукса. Подготовим диск.

$ lsblk # смотрим все доступные диски. Я буду ставить лиукс на диск sdc.
$ cfdisk /dev/sdc # запустим утилиту для работы с дисками. Утилита очень простая и интуитивно понятная. Создаем два раздела. sdc1 - 256Mb и Type - EFI System. sdc2 - все свободное место, Type - Linux file system. Сразу после запуска cfdisk предложит выбрать таблицу разделов, выбираем gpt. Если выбор не предложен, обнуляем таблицу разделов cfdisk -z /dev/sdc

- Форматируем разделы и создаем метку arch для диска с корнем.
$ mkfs.vfat /dev/sdc1 
* dosfstools gets you mkfs.vfat and mkfs.msdos
mkfs.btrfs -L "arch" /dev/sdc2

- Монтируем новые разделы. На sdс2 будет корень, на sdс1 - загрузчик.
mount /dev/sdc2 /mnt
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume list /mnt
umount /mnt
mount -o subvol=@,compress=zstd /dev/sdc2 /mnt
mkdir /mnt/home
mount -o subvol=@home,compress=zstd /dev/sdc2 /mnt/home
$ mkdir /mnt/boot
$ mount /dev/sdс1 /mnt/boot

* раздел подкачки
$ mkswap /dev/sdx
$ swapon /dev/sdx

- Устанавливаем основные пакеты. Если cpu amd, меняем последний пакет на amd-ucode
$ pacstrap /mnt base linux linux-firmware nano vim inetutils netctl intel-ucode

- Генерим fstab и чрутимся в устанавливаемую систему.
$ genfstab -U /mnt >> /mnt/etc/fstab
$ arch-chroot /mnt

- Настраиваем локаль и hostname. С помощью текстового редактора nano конфигурируем файлы locale.gen, locale.conf, vconsole.conf. 

$ ln -sf /usr/share/zoneinfo/Europe/Kiev /etc/localtime

$ nano /etc/locale.gen # раскомментируем строку: en_US.UTF-8
$ locale-gen # генерируем локаль

$ nano /etc/locale.conf # добавляем строку: LANG=en_US.UTF-8

$ nano /etc/vconsole.conf # добавляем строку: KEYMAP=us

$ nano /etc/hostname # добавляем имя компьютера

- Ставим networkmanager, sudo и прочее. Включаем службу NetworkManager, иначе после перезагрузки не будет сети. 
- nmtui # утилита для подключения к вайфай и настройка сети

$ pacman -S networkmanager bash-completion sudo iwd
$ systemctl enable NetworkManager

$ passwd # создаем пароль для рута

- Устанавливаем и настраиваем загрузчик bootctl. этот загрузчик работает только с UEFI

$ bootctl install
$ nano /boot/loader/entries/arch.conf # сюда добавляем текст:
title Archlinux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options root=UUID="23539706-dc93-4182-bc08-9f77a17e75d8" subvol=@ rw # для btrfs

- Настраиваем pacman, sudo, добавляем пользователя.

$ useradd -m -g users -G audio,video,network,wheel,storage -s /bin/bash username # добавляем юзера. Вместо username, ставим свое.
$ passwd username # создаем пароль юзера. можно использовать такой-же как и для рута.

$ nano /etc/sudoers # раскомментируем строку: %wheel ALL=(ALL) ALL
* $ visudo # тоже что и nano /etc/sudoers

$ pacman -S xfce4 xorg xorg-xinit alacritty btrfs-progs
$ pacman -Syu nvidia nvidia-utils lib32-nvidia-utils # nvidia
$ pacman -S mesa # amd 

# настройка xinit
cp /etc/X11/xinit/xinitrc ~/.xinitrc
.xinitrc
exec startxfce4

# автостарт DE xinit
/etc/systemd/system/getty@tty1.service.d/autologin.conf
[Service]
ExecStart=
ExecStart=-/sbin/agetty -o '-p -f -- \\u' --noclear --autologin пользователь %I $TERM

# автологин в tty
~/.zlogin или ~/.bash_profile
[[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx
