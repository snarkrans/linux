Простой гайд установки Arch Linux по ssh. Весь процесс установки занимает не более 10 минут.
Под * указаны альтернативные варианты установки. Можно игнорировать.

- Качаем Arch Linux.
https://archlinux.org/download/

- Делаем загрузочную флешку.
https://wiki.archlinux.org/index.php/USB_flash_installation_medium_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)#%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5_%D0%B7%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BE%D1%87%D0%BD%D0%BE%D0%B3%D0%BE_USB_%D0%B4%D0%BB%D1%8F_BIOS_%D0%B8_UEFI

- Грузимся с флешки. Если железо старое, проверяем поддержку UEFI.
$ cat /sys/firmware/efi/fw_platform_size # команда возвращает 64 в режиме UEFI. Если файл не найден, идем в биос и включаем поддержку UEFI. 

$ loadkeys us # набираем, если есть проблемы с раскладкой клавиатуры. Обычно это не нужно. 

- Подключаемся к вайфай (при необходимости). https://www.youtube.com/watch?v=bOzLwODMqIo
$ iwctl
[iwd]# device list - покажет имя вайфай адаптера
[iwd]# station device scan - сканирует сеть
[iwd]# station device get-networks - покажет имена доступных сетей
[iwd]# station device connect SSID - подключится к сети. SSID - это имя сети.
[iwd]# device wlan0 set-property Powered on

если вайфай заблокирован
*$ rfkill list
*$ rfkill unblock wifi
*$ ip link set wlan0 up
iwlwifi — беспроводной драйвер для современных чипов Intel

- Проверяем подключение.
$ ping archlinux.org
$ ip link

- Поздравляю, мы в матрице.
$ pacman -S openssh # устанавливаем ssh.
$ passwd # создаем временный пароль для доступа по ssh.
$ systemctl start sshd.service # запускаем сервис.
$ ip ad # смотрим айпишник.

- Если ставим линукс через интернет а не локальную сеть, нужно узнать внешний айпишник и открыть 22 порт на роутере.
$ curl ifconfig.co # смотрим внешний айпишник.

- Теперь можно переходить на машину, с которой будем ставить линукс удаленно.
$ ssh root@192.168.0.101 # заходим на удаленную машину по ssh. Айпишник подставляем наш.

- Мы зашли на удаленную машину по ssh, можно приступать к установке линукса. Подготовим диск.

$ lsblk # смотрим все доступные диски. Я буду ставить лиукс на диск sdc.
$ cfdisk /dev/sdc # запустим утилиту для работы с дисками. Утилита очень простая и интуитивно понятная. Создаем два раздела. sdc1 - 256Mb и Type - EFI System. sdc2 - все свободное место, Type - Linux file system. Сразу после запуска cfdisk предложит выбрать таблицу разделов, выбираем gpt. Если выбор не предложен, обнуляем таблицу разделов cfdisk -z /dev/sdc
* для таблици разедлов bios достаточно одного раздела. Type - linux, метка boot.

* для установки на dos таблицу разделов, достаточно создать один раздел, поставить метку boot и отформатировать раздел в ext4

- Форматируем разделы и создаем метку arch для диска с корнем.
$ mkfs.vfat /dev/sdc1 
$ mkfs.ext4 /dev/sdc2
$ e2label /dev/sdc2 arch

* раздел подкачки
$ mkswap /dev/sdx
$ swapon /dev/sdx

- Монтируем новые разделы. На sdс2 будет корень, на sdс1 - загрузчик.
$ mount /dev/sdс2 /mnt
$ mkdir /mnt/boot
$ mount /dev/sdс1 /mnt/boot

- Устанавливаем основные пакеты. Если cpu amd, меняем последний пакет на amd-ucode
$ pacstrap /mnt base linux linux-firmware nano vim inetutils netctl intel-ucode

- Генерим fstab и чрутимся в устанавливаемую систему.

$ genfstab -U /mnt >> /mnt/etc/fstab
$ arch-chroot /mnt

- Настраиваем локаль и hostname. С помощью текстового редактора nano конфигурируем файлы locale.gen, locale.conf, vconsole.conf. 

$ ln -sf /usr/share/zoneinfo/Europe/Kiev /etc/localtime

$ nano /etc/locale.gen # раскомментируем строку: en_US.UTF-8
$ locale-gen # генерируем локаль

$ nano /etc/locale.conf # добавляем строку: LANG=en_US.UTF-8

$ nano /etc/vconsole.conf # добавляем строку: KEYMAP=us

$ nano /etc/hostname # добавляем имя компьютера

- Ставим networkmanager, sudo и прочее. Включаем службу NetworkManager, иначе после перезагрузки не будет сети. 
- nmtui # утилита для подключения к вайфай и настройка сети

$ pacman -S networkmanager bash-completion sudo
$ systemctl enable NetworkManager

* dhcpcd dhcp iwd - пакеты для подключения к wi-fi через iwctl, но лучше использовать NetworkManager и nmtui. нужно запустить службы dhcpcd dhcp. 

$ passwd # создаем пароль для рута

- Устанавливаем и настраиваем загрузчик bootctl. этот загрузчик работает только с UEFI

$ bootctl install
$ nano /boot/loader/entries/arch.conf # сюда добавляем текст:
title Archlinux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options root=LABEL=arch rw # arch - метка корневого раздела
#options root=UUID="23539706-dc93-4182-bc08-9f77a17e75d8" subvol=@ rw # для btrfs

* Установка загрузчика grub bios
$ pacman -S grub 
$ grub-install /dev/sdx # диск (не раздел) с корневым разделом
$ grub-mkconfig -o /boot/grub/grub.cfg

* Установка grub на UEFI
$ pacman -S grub efibootmgr
$ grub-install --target=x86_64-efi --efi-directory=/boot
$ grub-mkconfig -o /boot/grub/grub.cfg
$ mkdir /boot/EFI/boot
$ cp /boot/EFI/arch/grubx64.efi /boot/EFI/boot/bootx64.efi

- Настраиваем pacman, sudo, добавляем пользователя.

$ useradd -m -g users -G audio,video,network,wheel,storage -s /bin/bash username # добавляем юзера. Вместо username, ставим свое.
$ passwd username # создаем пароль юзера. можно использовать такой-же как и для рута.

$ nano /etc/sudoers # раскомментируем строку: %wheel ALL=(ALL) ALL
* $ visudo # тоже что и nano /etc/sudoers

- Установка завершена! Осталось добавить рабочий стол. Например, plasma и драйвер nvidia. Для gpu amd драйвер ставить не нужно. Для интел: mesa или xf86-video-intel(Не рекомендуется).

$ pacman -S plasma konsole sddm
$ systemctl enable sddm
$ pacman -Syu nvidia nvidia-utils lib32-nvidia-utils 

*
$ pacman -S mesa xf86-video-intel mate xorg xorg-xinit 
to start MATE with startx, append exec mate-session to your ~/.xinitrc

Все, установка закончена!


P.S.

* файл подкачки
sudo dd if=/dev/zero of=/swap/swapfile bs=1M count=8192 status=progress
sudo chmod 600 /swap/swapfile
sudo mkswap /swap/swapfile
sudo swapon /swap/swapfile
echo '/swap/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

*zram-generator
https://github.com/systemd/zram-generator

$ lspci -v | grep -A1 -e VGA -e 3D # покажет модель видеокарты
$ cat /proc/cpuinfo # покажет модель процессора

* Чтобы в чистой консоле работал звук, установить пакеты alsa alsa-utils
* Чтобы в чистой консоле работал блютуз, нужно установить еше и pulseaudio
$ pacman -S bluez bluez-utils pulseaudio pulseaudio-alsa pulseaudio-bluetooth pulsemixer  
$ systemctl --user enable pulseaudio.socket # включение

pulsemixer # аудио микшер для pulseaudio
alsamixer # микшер для alsa 

pulseaudio --start # запуск
pulseaudio -k # перезапуск


backup - перед созданием бекапа примонтировать загрузочный раздел
распаковка бекапа
sudo tar xvpfz b01.tgz -C /mnt/arch
* возможно необходимо создать недостающие директории

создание бекапа
cd /
tar --exclude=./{proc,sys,mnt,tmp,lost+found} --exclude=./home/snark/{snsoft,Downloads} --exclude=./var/{log,cache} -cpzvf /mnt/work/linux/backup/backup.tgz .

Настрока клавиатуры, если F1-F12 работают как Fn. Поменять 3 на 0.
echo 0 | sudo tee /sys/module/hid_apple/parameters/fnmode
To persist this change, add a module option for hid_apple:
echo "options hid_apple fnmode=0" | sudo tee -a /etc/modprobe.d/hid_apple.conf
You may need to rebuild your initramfs if hid_apple is included. - ubuntu: sudo update-initramfs -u - arch: mkinitcpio -P


# установка на btrfs
mkfs.btrfs -L "arch" /dev/sda2
Теперь монтируем.
mount /dev/sda2 /mnt
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume list /mnt
umount /mnt
mount -o subvol=@,compress=zstd /dev/sda2 /mnt
mkdir /mnt/home
mount -o subvol=@home,compress=zstd /dev/sda2 /mnt/home

После переустановки загрузчика:
mkinitcpio -P
